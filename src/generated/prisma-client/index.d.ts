// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  address: (where?: AddressWhereInput) => Promise<boolean>;
  crime: (where?: CrimeWhereInput) => Promise<boolean>;
  favorite: (where?: FavoriteWhereInput) => Promise<boolean>;
  review: (where?: ReviewWhereInput) => Promise<boolean>;
  station: (where?: StationWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  address: (where: AddressWhereUniqueInput) => AddressNullablePromise;
  addresses: (args?: {
    where?: AddressWhereInput;
    orderBy?: AddressOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Address>;
  addressesConnection: (args?: {
    where?: AddressWhereInput;
    orderBy?: AddressOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AddressConnectionPromise;
  crime: (where: CrimeWhereUniqueInput) => CrimeNullablePromise;
  crimes: (args?: {
    where?: CrimeWhereInput;
    orderBy?: CrimeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Crime>;
  crimesConnection: (args?: {
    where?: CrimeWhereInput;
    orderBy?: CrimeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CrimeConnectionPromise;
  favorite: (where: FavoriteWhereUniqueInput) => FavoriteNullablePromise;
  favorites: (args?: {
    where?: FavoriteWhereInput;
    orderBy?: FavoriteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Favorite>;
  favoritesConnection: (args?: {
    where?: FavoriteWhereInput;
    orderBy?: FavoriteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FavoriteConnectionPromise;
  review: (where: ReviewWhereUniqueInput) => ReviewNullablePromise;
  reviews: (args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Review>;
  reviewsConnection: (args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ReviewConnectionPromise;
  station: (where: StationWhereUniqueInput) => StationNullablePromise;
  stations: (args?: {
    where?: StationWhereInput;
    orderBy?: StationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Station>;
  stationsConnection: (args?: {
    where?: StationWhereInput;
    orderBy?: StationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => StationConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAddress: (data: AddressCreateInput) => AddressPromise;
  updateAddress: (args: {
    data: AddressUpdateInput;
    where: AddressWhereUniqueInput;
  }) => AddressPromise;
  updateManyAddresses: (args: {
    data: AddressUpdateManyMutationInput;
    where?: AddressWhereInput;
  }) => BatchPayloadPromise;
  upsertAddress: (args: {
    where: AddressWhereUniqueInput;
    create: AddressCreateInput;
    update: AddressUpdateInput;
  }) => AddressPromise;
  deleteAddress: (where: AddressWhereUniqueInput) => AddressPromise;
  deleteManyAddresses: (where?: AddressWhereInput) => BatchPayloadPromise;
  createCrime: (data: CrimeCreateInput) => CrimePromise;
  updateCrime: (args: {
    data: CrimeUpdateInput;
    where: CrimeWhereUniqueInput;
  }) => CrimePromise;
  updateManyCrimes: (args: {
    data: CrimeUpdateManyMutationInput;
    where?: CrimeWhereInput;
  }) => BatchPayloadPromise;
  upsertCrime: (args: {
    where: CrimeWhereUniqueInput;
    create: CrimeCreateInput;
    update: CrimeUpdateInput;
  }) => CrimePromise;
  deleteCrime: (where: CrimeWhereUniqueInput) => CrimePromise;
  deleteManyCrimes: (where?: CrimeWhereInput) => BatchPayloadPromise;
  createFavorite: (data: FavoriteCreateInput) => FavoritePromise;
  updateFavorite: (args: {
    data: FavoriteUpdateInput;
    where: FavoriteWhereUniqueInput;
  }) => FavoritePromise;
  updateManyFavorites: (args: {
    data: FavoriteUpdateManyMutationInput;
    where?: FavoriteWhereInput;
  }) => BatchPayloadPromise;
  upsertFavorite: (args: {
    where: FavoriteWhereUniqueInput;
    create: FavoriteCreateInput;
    update: FavoriteUpdateInput;
  }) => FavoritePromise;
  deleteFavorite: (where: FavoriteWhereUniqueInput) => FavoritePromise;
  deleteManyFavorites: (where?: FavoriteWhereInput) => BatchPayloadPromise;
  createReview: (data: ReviewCreateInput) => ReviewPromise;
  updateReview: (args: {
    data: ReviewUpdateInput;
    where: ReviewWhereUniqueInput;
  }) => ReviewPromise;
  updateManyReviews: (args: {
    data: ReviewUpdateManyMutationInput;
    where?: ReviewWhereInput;
  }) => BatchPayloadPromise;
  upsertReview: (args: {
    where: ReviewWhereUniqueInput;
    create: ReviewCreateInput;
    update: ReviewUpdateInput;
  }) => ReviewPromise;
  deleteReview: (where: ReviewWhereUniqueInput) => ReviewPromise;
  deleteManyReviews: (where?: ReviewWhereInput) => BatchPayloadPromise;
  createStation: (data: StationCreateInput) => StationPromise;
  updateStation: (args: {
    data: StationUpdateInput;
    where: StationWhereUniqueInput;
  }) => StationPromise;
  updateManyStations: (args: {
    data: StationUpdateManyMutationInput;
    where?: StationWhereInput;
  }) => BatchPayloadPromise;
  upsertStation: (args: {
    where: StationWhereUniqueInput;
    create: StationCreateInput;
    update: StationUpdateInput;
  }) => StationPromise;
  deleteStation: (where: StationWhereUniqueInput) => StationPromise;
  deleteManyStations: (where?: StationWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  address: (
    where?: AddressSubscriptionWhereInput
  ) => AddressSubscriptionPayloadSubscription;
  crime: (
    where?: CrimeSubscriptionWhereInput
  ) => CrimeSubscriptionPayloadSubscription;
  favorite: (
    where?: FavoriteSubscriptionWhereInput
  ) => FavoriteSubscriptionPayloadSubscription;
  review: (
    where?: ReviewSubscriptionWhereInput
  ) => ReviewSubscriptionPayloadSubscription;
  station: (
    where?: StationSubscriptionWhereInput
  ) => StationSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ReviewOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "text_ASC"
  | "text_DESC"
  | "rating_ASC"
  | "rating_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type FavoriteOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "aliasInput_ASC"
  | "aliasInput_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type AddressOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "detail_ASC"
  | "detail_DESC"
  | "X_ASC"
  | "X_DESC"
  | "Y_ASC"
  | "Y_DESC"
  | "gu_ASC"
  | "gu_DESC"
  | "rn_ASC"
  | "rn_DESC";

export type CrimeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "gu_ASC"
  | "gu_DESC"
  | "murder_ASC"
  | "murder_DESC"
  | "robbery_ASC"
  | "robbery_DESC"
  | "rape_ASC"
  | "rape_DESC"
  | "theft_ASC"
  | "theft_DESC"
  | "violence_ASC"
  | "violence_DESC";

export type StationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "stationName_ASC"
  | "stationName_DESC"
  | "X_ASC"
  | "X_DESC"
  | "Y_ASC"
  | "Y_DESC"
  | "stationAddress_ASC"
  | "stationAddress_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type AddressWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ReviewWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  rating?: Maybe<Int>;
  rating_not?: Maybe<Int>;
  rating_in?: Maybe<Int[] | Int>;
  rating_not_in?: Maybe<Int[] | Int>;
  rating_lt?: Maybe<Int>;
  rating_lte?: Maybe<Int>;
  rating_gt?: Maybe<Int>;
  rating_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  postedBy?: Maybe<UserWhereInput>;
  postedAt?: Maybe<AddressWhereInput>;
  AND?: Maybe<ReviewWhereInput[] | ReviewWhereInput>;
  OR?: Maybe<ReviewWhereInput[] | ReviewWhereInput>;
  NOT?: Maybe<ReviewWhereInput[] | ReviewWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  review_every?: Maybe<ReviewWhereInput>;
  review_some?: Maybe<ReviewWhereInput>;
  review_none?: Maybe<ReviewWhereInput>;
  favorite_every?: Maybe<FavoriteWhereInput>;
  favorite_some?: Maybe<FavoriteWhereInput>;
  favorite_none?: Maybe<FavoriteWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface FavoriteWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  aliasInput?: Maybe<String>;
  aliasInput_not?: Maybe<String>;
  aliasInput_in?: Maybe<String[] | String>;
  aliasInput_not_in?: Maybe<String[] | String>;
  aliasInput_lt?: Maybe<String>;
  aliasInput_lte?: Maybe<String>;
  aliasInput_gt?: Maybe<String>;
  aliasInput_gte?: Maybe<String>;
  aliasInput_contains?: Maybe<String>;
  aliasInput_not_contains?: Maybe<String>;
  aliasInput_starts_with?: Maybe<String>;
  aliasInput_not_starts_with?: Maybe<String>;
  aliasInput_ends_with?: Maybe<String>;
  aliasInput_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  postedBy?: Maybe<UserWhereInput>;
  postedAt?: Maybe<AddressWhereInput>;
  AND?: Maybe<FavoriteWhereInput[] | FavoriteWhereInput>;
  OR?: Maybe<FavoriteWhereInput[] | FavoriteWhereInput>;
  NOT?: Maybe<FavoriteWhereInput[] | FavoriteWhereInput>;
}

export interface AddressWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  detail?: Maybe<String>;
  detail_not?: Maybe<String>;
  detail_in?: Maybe<String[] | String>;
  detail_not_in?: Maybe<String[] | String>;
  detail_lt?: Maybe<String>;
  detail_lte?: Maybe<String>;
  detail_gt?: Maybe<String>;
  detail_gte?: Maybe<String>;
  detail_contains?: Maybe<String>;
  detail_not_contains?: Maybe<String>;
  detail_starts_with?: Maybe<String>;
  detail_not_starts_with?: Maybe<String>;
  detail_ends_with?: Maybe<String>;
  detail_not_ends_with?: Maybe<String>;
  X?: Maybe<Float>;
  X_not?: Maybe<Float>;
  X_in?: Maybe<Float[] | Float>;
  X_not_in?: Maybe<Float[] | Float>;
  X_lt?: Maybe<Float>;
  X_lte?: Maybe<Float>;
  X_gt?: Maybe<Float>;
  X_gte?: Maybe<Float>;
  Y?: Maybe<Float>;
  Y_not?: Maybe<Float>;
  Y_in?: Maybe<Float[] | Float>;
  Y_not_in?: Maybe<Float[] | Float>;
  Y_lt?: Maybe<Float>;
  Y_lte?: Maybe<Float>;
  Y_gt?: Maybe<Float>;
  Y_gte?: Maybe<Float>;
  gu?: Maybe<String>;
  gu_not?: Maybe<String>;
  gu_in?: Maybe<String[] | String>;
  gu_not_in?: Maybe<String[] | String>;
  gu_lt?: Maybe<String>;
  gu_lte?: Maybe<String>;
  gu_gt?: Maybe<String>;
  gu_gte?: Maybe<String>;
  gu_contains?: Maybe<String>;
  gu_not_contains?: Maybe<String>;
  gu_starts_with?: Maybe<String>;
  gu_not_starts_with?: Maybe<String>;
  gu_ends_with?: Maybe<String>;
  gu_not_ends_with?: Maybe<String>;
  rn?: Maybe<String>;
  rn_not?: Maybe<String>;
  rn_in?: Maybe<String[] | String>;
  rn_not_in?: Maybe<String[] | String>;
  rn_lt?: Maybe<String>;
  rn_lte?: Maybe<String>;
  rn_gt?: Maybe<String>;
  rn_gte?: Maybe<String>;
  rn_contains?: Maybe<String>;
  rn_not_contains?: Maybe<String>;
  rn_starts_with?: Maybe<String>;
  rn_not_starts_with?: Maybe<String>;
  rn_ends_with?: Maybe<String>;
  rn_not_ends_with?: Maybe<String>;
  review_every?: Maybe<ReviewWhereInput>;
  review_some?: Maybe<ReviewWhereInput>;
  review_none?: Maybe<ReviewWhereInput>;
  favorite_every?: Maybe<FavoriteWhereInput>;
  favorite_some?: Maybe<FavoriteWhereInput>;
  favorite_none?: Maybe<FavoriteWhereInput>;
  AND?: Maybe<AddressWhereInput[] | AddressWhereInput>;
  OR?: Maybe<AddressWhereInput[] | AddressWhereInput>;
  NOT?: Maybe<AddressWhereInput[] | AddressWhereInput>;
}

export type CrimeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  gu?: Maybe<String>;
}>;

export interface CrimeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  gu?: Maybe<String>;
  gu_not?: Maybe<String>;
  gu_in?: Maybe<String[] | String>;
  gu_not_in?: Maybe<String[] | String>;
  gu_lt?: Maybe<String>;
  gu_lte?: Maybe<String>;
  gu_gt?: Maybe<String>;
  gu_gte?: Maybe<String>;
  gu_contains?: Maybe<String>;
  gu_not_contains?: Maybe<String>;
  gu_starts_with?: Maybe<String>;
  gu_not_starts_with?: Maybe<String>;
  gu_ends_with?: Maybe<String>;
  gu_not_ends_with?: Maybe<String>;
  murder?: Maybe<Int>;
  murder_not?: Maybe<Int>;
  murder_in?: Maybe<Int[] | Int>;
  murder_not_in?: Maybe<Int[] | Int>;
  murder_lt?: Maybe<Int>;
  murder_lte?: Maybe<Int>;
  murder_gt?: Maybe<Int>;
  murder_gte?: Maybe<Int>;
  robbery?: Maybe<Int>;
  robbery_not?: Maybe<Int>;
  robbery_in?: Maybe<Int[] | Int>;
  robbery_not_in?: Maybe<Int[] | Int>;
  robbery_lt?: Maybe<Int>;
  robbery_lte?: Maybe<Int>;
  robbery_gt?: Maybe<Int>;
  robbery_gte?: Maybe<Int>;
  rape?: Maybe<Int>;
  rape_not?: Maybe<Int>;
  rape_in?: Maybe<Int[] | Int>;
  rape_not_in?: Maybe<Int[] | Int>;
  rape_lt?: Maybe<Int>;
  rape_lte?: Maybe<Int>;
  rape_gt?: Maybe<Int>;
  rape_gte?: Maybe<Int>;
  theft?: Maybe<Int>;
  theft_not?: Maybe<Int>;
  theft_in?: Maybe<Int[] | Int>;
  theft_not_in?: Maybe<Int[] | Int>;
  theft_lt?: Maybe<Int>;
  theft_lte?: Maybe<Int>;
  theft_gt?: Maybe<Int>;
  theft_gte?: Maybe<Int>;
  violence?: Maybe<Int>;
  violence_not?: Maybe<Int>;
  violence_in?: Maybe<Int[] | Int>;
  violence_not_in?: Maybe<Int[] | Int>;
  violence_lt?: Maybe<Int>;
  violence_lte?: Maybe<Int>;
  violence_gt?: Maybe<Int>;
  violence_gte?: Maybe<Int>;
  AND?: Maybe<CrimeWhereInput[] | CrimeWhereInput>;
  OR?: Maybe<CrimeWhereInput[] | CrimeWhereInput>;
  NOT?: Maybe<CrimeWhereInput[] | CrimeWhereInput>;
}

export type FavoriteWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type ReviewWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type StationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface StationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  stationName?: Maybe<String>;
  stationName_not?: Maybe<String>;
  stationName_in?: Maybe<String[] | String>;
  stationName_not_in?: Maybe<String[] | String>;
  stationName_lt?: Maybe<String>;
  stationName_lte?: Maybe<String>;
  stationName_gt?: Maybe<String>;
  stationName_gte?: Maybe<String>;
  stationName_contains?: Maybe<String>;
  stationName_not_contains?: Maybe<String>;
  stationName_starts_with?: Maybe<String>;
  stationName_not_starts_with?: Maybe<String>;
  stationName_ends_with?: Maybe<String>;
  stationName_not_ends_with?: Maybe<String>;
  X?: Maybe<Float>;
  X_not?: Maybe<Float>;
  X_in?: Maybe<Float[] | Float>;
  X_not_in?: Maybe<Float[] | Float>;
  X_lt?: Maybe<Float>;
  X_lte?: Maybe<Float>;
  X_gt?: Maybe<Float>;
  X_gte?: Maybe<Float>;
  Y?: Maybe<Float>;
  Y_not?: Maybe<Float>;
  Y_in?: Maybe<Float[] | Float>;
  Y_not_in?: Maybe<Float[] | Float>;
  Y_lt?: Maybe<Float>;
  Y_lte?: Maybe<Float>;
  Y_gt?: Maybe<Float>;
  Y_gte?: Maybe<Float>;
  stationAddress?: Maybe<String>;
  stationAddress_not?: Maybe<String>;
  stationAddress_in?: Maybe<String[] | String>;
  stationAddress_not_in?: Maybe<String[] | String>;
  stationAddress_lt?: Maybe<String>;
  stationAddress_lte?: Maybe<String>;
  stationAddress_gt?: Maybe<String>;
  stationAddress_gte?: Maybe<String>;
  stationAddress_contains?: Maybe<String>;
  stationAddress_not_contains?: Maybe<String>;
  stationAddress_starts_with?: Maybe<String>;
  stationAddress_not_starts_with?: Maybe<String>;
  stationAddress_ends_with?: Maybe<String>;
  stationAddress_not_ends_with?: Maybe<String>;
  AND?: Maybe<StationWhereInput[] | StationWhereInput>;
  OR?: Maybe<StationWhereInput[] | StationWhereInput>;
  NOT?: Maybe<StationWhereInput[] | StationWhereInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface AddressCreateInput {
  id?: Maybe<ID_Input>;
  detail: String;
  X: Float;
  Y: Float;
  gu: String;
  rn: String;
  review?: Maybe<ReviewCreateManyWithoutPostedAtInput>;
  favorite?: Maybe<FavoriteCreateManyWithoutPostedAtInput>;
}

export interface ReviewCreateManyWithoutPostedAtInput {
  create?: Maybe<
    ReviewCreateWithoutPostedAtInput[] | ReviewCreateWithoutPostedAtInput
  >;
  connect?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
}

export interface ReviewCreateWithoutPostedAtInput {
  id?: Maybe<ID_Input>;
  text: String;
  rating: Int;
  postedBy: UserCreateOneWithoutReviewInput;
}

export interface UserCreateOneWithoutReviewInput {
  create?: Maybe<UserCreateWithoutReviewInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutReviewInput {
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
  favorite?: Maybe<FavoriteCreateManyWithoutPostedByInput>;
}

export interface FavoriteCreateManyWithoutPostedByInput {
  create?: Maybe<
    FavoriteCreateWithoutPostedByInput[] | FavoriteCreateWithoutPostedByInput
  >;
  connect?: Maybe<FavoriteWhereUniqueInput[] | FavoriteWhereUniqueInput>;
}

export interface FavoriteCreateWithoutPostedByInput {
  id?: Maybe<ID_Input>;
  aliasInput: String;
  postedAt: AddressCreateOneWithoutFavoriteInput;
}

export interface AddressCreateOneWithoutFavoriteInput {
  create?: Maybe<AddressCreateWithoutFavoriteInput>;
  connect?: Maybe<AddressWhereUniqueInput>;
}

export interface AddressCreateWithoutFavoriteInput {
  id?: Maybe<ID_Input>;
  detail: String;
  X: Float;
  Y: Float;
  gu: String;
  rn: String;
  review?: Maybe<ReviewCreateManyWithoutPostedAtInput>;
}

export interface FavoriteCreateManyWithoutPostedAtInput {
  create?: Maybe<
    FavoriteCreateWithoutPostedAtInput[] | FavoriteCreateWithoutPostedAtInput
  >;
  connect?: Maybe<FavoriteWhereUniqueInput[] | FavoriteWhereUniqueInput>;
}

export interface FavoriteCreateWithoutPostedAtInput {
  id?: Maybe<ID_Input>;
  aliasInput: String;
  postedBy: UserCreateOneWithoutFavoriteInput;
}

export interface UserCreateOneWithoutFavoriteInput {
  create?: Maybe<UserCreateWithoutFavoriteInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutFavoriteInput {
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
  review?: Maybe<ReviewCreateManyWithoutPostedByInput>;
}

export interface ReviewCreateManyWithoutPostedByInput {
  create?: Maybe<
    ReviewCreateWithoutPostedByInput[] | ReviewCreateWithoutPostedByInput
  >;
  connect?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
}

export interface ReviewCreateWithoutPostedByInput {
  id?: Maybe<ID_Input>;
  text: String;
  rating: Int;
  postedAt: AddressCreateOneWithoutReviewInput;
}

export interface AddressCreateOneWithoutReviewInput {
  create?: Maybe<AddressCreateWithoutReviewInput>;
  connect?: Maybe<AddressWhereUniqueInput>;
}

export interface AddressCreateWithoutReviewInput {
  id?: Maybe<ID_Input>;
  detail: String;
  X: Float;
  Y: Float;
  gu: String;
  rn: String;
  favorite?: Maybe<FavoriteCreateManyWithoutPostedAtInput>;
}

export interface AddressUpdateInput {
  detail?: Maybe<String>;
  X?: Maybe<Float>;
  Y?: Maybe<Float>;
  gu?: Maybe<String>;
  rn?: Maybe<String>;
  review?: Maybe<ReviewUpdateManyWithoutPostedAtInput>;
  favorite?: Maybe<FavoriteUpdateManyWithoutPostedAtInput>;
}

export interface ReviewUpdateManyWithoutPostedAtInput {
  create?: Maybe<
    ReviewCreateWithoutPostedAtInput[] | ReviewCreateWithoutPostedAtInput
  >;
  delete?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  connect?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  set?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  disconnect?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  update?: Maybe<
    | ReviewUpdateWithWhereUniqueWithoutPostedAtInput[]
    | ReviewUpdateWithWhereUniqueWithoutPostedAtInput
  >;
  upsert?: Maybe<
    | ReviewUpsertWithWhereUniqueWithoutPostedAtInput[]
    | ReviewUpsertWithWhereUniqueWithoutPostedAtInput
  >;
  deleteMany?: Maybe<ReviewScalarWhereInput[] | ReviewScalarWhereInput>;
  updateMany?: Maybe<
    | ReviewUpdateManyWithWhereNestedInput[]
    | ReviewUpdateManyWithWhereNestedInput
  >;
}

export interface ReviewUpdateWithWhereUniqueWithoutPostedAtInput {
  where: ReviewWhereUniqueInput;
  data: ReviewUpdateWithoutPostedAtDataInput;
}

export interface ReviewUpdateWithoutPostedAtDataInput {
  text?: Maybe<String>;
  rating?: Maybe<Int>;
  postedBy?: Maybe<UserUpdateOneRequiredWithoutReviewInput>;
}

export interface UserUpdateOneRequiredWithoutReviewInput {
  create?: Maybe<UserCreateWithoutReviewInput>;
  update?: Maybe<UserUpdateWithoutReviewDataInput>;
  upsert?: Maybe<UserUpsertWithoutReviewInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutReviewDataInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  favorite?: Maybe<FavoriteUpdateManyWithoutPostedByInput>;
}

export interface FavoriteUpdateManyWithoutPostedByInput {
  create?: Maybe<
    FavoriteCreateWithoutPostedByInput[] | FavoriteCreateWithoutPostedByInput
  >;
  delete?: Maybe<FavoriteWhereUniqueInput[] | FavoriteWhereUniqueInput>;
  connect?: Maybe<FavoriteWhereUniqueInput[] | FavoriteWhereUniqueInput>;
  set?: Maybe<FavoriteWhereUniqueInput[] | FavoriteWhereUniqueInput>;
  disconnect?: Maybe<FavoriteWhereUniqueInput[] | FavoriteWhereUniqueInput>;
  update?: Maybe<
    | FavoriteUpdateWithWhereUniqueWithoutPostedByInput[]
    | FavoriteUpdateWithWhereUniqueWithoutPostedByInput
  >;
  upsert?: Maybe<
    | FavoriteUpsertWithWhereUniqueWithoutPostedByInput[]
    | FavoriteUpsertWithWhereUniqueWithoutPostedByInput
  >;
  deleteMany?: Maybe<FavoriteScalarWhereInput[] | FavoriteScalarWhereInput>;
  updateMany?: Maybe<
    | FavoriteUpdateManyWithWhereNestedInput[]
    | FavoriteUpdateManyWithWhereNestedInput
  >;
}

export interface FavoriteUpdateWithWhereUniqueWithoutPostedByInput {
  where: FavoriteWhereUniqueInput;
  data: FavoriteUpdateWithoutPostedByDataInput;
}

export interface FavoriteUpdateWithoutPostedByDataInput {
  aliasInput?: Maybe<String>;
  postedAt?: Maybe<AddressUpdateOneRequiredWithoutFavoriteInput>;
}

export interface AddressUpdateOneRequiredWithoutFavoriteInput {
  create?: Maybe<AddressCreateWithoutFavoriteInput>;
  update?: Maybe<AddressUpdateWithoutFavoriteDataInput>;
  upsert?: Maybe<AddressUpsertWithoutFavoriteInput>;
  connect?: Maybe<AddressWhereUniqueInput>;
}

export interface AddressUpdateWithoutFavoriteDataInput {
  detail?: Maybe<String>;
  X?: Maybe<Float>;
  Y?: Maybe<Float>;
  gu?: Maybe<String>;
  rn?: Maybe<String>;
  review?: Maybe<ReviewUpdateManyWithoutPostedAtInput>;
}

export interface AddressUpsertWithoutFavoriteInput {
  update: AddressUpdateWithoutFavoriteDataInput;
  create: AddressCreateWithoutFavoriteInput;
}

export interface FavoriteUpsertWithWhereUniqueWithoutPostedByInput {
  where: FavoriteWhereUniqueInput;
  update: FavoriteUpdateWithoutPostedByDataInput;
  create: FavoriteCreateWithoutPostedByInput;
}

export interface FavoriteScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  aliasInput?: Maybe<String>;
  aliasInput_not?: Maybe<String>;
  aliasInput_in?: Maybe<String[] | String>;
  aliasInput_not_in?: Maybe<String[] | String>;
  aliasInput_lt?: Maybe<String>;
  aliasInput_lte?: Maybe<String>;
  aliasInput_gt?: Maybe<String>;
  aliasInput_gte?: Maybe<String>;
  aliasInput_contains?: Maybe<String>;
  aliasInput_not_contains?: Maybe<String>;
  aliasInput_starts_with?: Maybe<String>;
  aliasInput_not_starts_with?: Maybe<String>;
  aliasInput_ends_with?: Maybe<String>;
  aliasInput_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<FavoriteScalarWhereInput[] | FavoriteScalarWhereInput>;
  OR?: Maybe<FavoriteScalarWhereInput[] | FavoriteScalarWhereInput>;
  NOT?: Maybe<FavoriteScalarWhereInput[] | FavoriteScalarWhereInput>;
}

export interface FavoriteUpdateManyWithWhereNestedInput {
  where: FavoriteScalarWhereInput;
  data: FavoriteUpdateManyDataInput;
}

export interface FavoriteUpdateManyDataInput {
  aliasInput?: Maybe<String>;
}

export interface UserUpsertWithoutReviewInput {
  update: UserUpdateWithoutReviewDataInput;
  create: UserCreateWithoutReviewInput;
}

export interface ReviewUpsertWithWhereUniqueWithoutPostedAtInput {
  where: ReviewWhereUniqueInput;
  update: ReviewUpdateWithoutPostedAtDataInput;
  create: ReviewCreateWithoutPostedAtInput;
}

export interface ReviewScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  rating?: Maybe<Int>;
  rating_not?: Maybe<Int>;
  rating_in?: Maybe<Int[] | Int>;
  rating_not_in?: Maybe<Int[] | Int>;
  rating_lt?: Maybe<Int>;
  rating_lte?: Maybe<Int>;
  rating_gt?: Maybe<Int>;
  rating_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ReviewScalarWhereInput[] | ReviewScalarWhereInput>;
  OR?: Maybe<ReviewScalarWhereInput[] | ReviewScalarWhereInput>;
  NOT?: Maybe<ReviewScalarWhereInput[] | ReviewScalarWhereInput>;
}

export interface ReviewUpdateManyWithWhereNestedInput {
  where: ReviewScalarWhereInput;
  data: ReviewUpdateManyDataInput;
}

export interface ReviewUpdateManyDataInput {
  text?: Maybe<String>;
  rating?: Maybe<Int>;
}

export interface FavoriteUpdateManyWithoutPostedAtInput {
  create?: Maybe<
    FavoriteCreateWithoutPostedAtInput[] | FavoriteCreateWithoutPostedAtInput
  >;
  delete?: Maybe<FavoriteWhereUniqueInput[] | FavoriteWhereUniqueInput>;
  connect?: Maybe<FavoriteWhereUniqueInput[] | FavoriteWhereUniqueInput>;
  set?: Maybe<FavoriteWhereUniqueInput[] | FavoriteWhereUniqueInput>;
  disconnect?: Maybe<FavoriteWhereUniqueInput[] | FavoriteWhereUniqueInput>;
  update?: Maybe<
    | FavoriteUpdateWithWhereUniqueWithoutPostedAtInput[]
    | FavoriteUpdateWithWhereUniqueWithoutPostedAtInput
  >;
  upsert?: Maybe<
    | FavoriteUpsertWithWhereUniqueWithoutPostedAtInput[]
    | FavoriteUpsertWithWhereUniqueWithoutPostedAtInput
  >;
  deleteMany?: Maybe<FavoriteScalarWhereInput[] | FavoriteScalarWhereInput>;
  updateMany?: Maybe<
    | FavoriteUpdateManyWithWhereNestedInput[]
    | FavoriteUpdateManyWithWhereNestedInput
  >;
}

export interface FavoriteUpdateWithWhereUniqueWithoutPostedAtInput {
  where: FavoriteWhereUniqueInput;
  data: FavoriteUpdateWithoutPostedAtDataInput;
}

export interface FavoriteUpdateWithoutPostedAtDataInput {
  aliasInput?: Maybe<String>;
  postedBy?: Maybe<UserUpdateOneRequiredWithoutFavoriteInput>;
}

export interface UserUpdateOneRequiredWithoutFavoriteInput {
  create?: Maybe<UserCreateWithoutFavoriteInput>;
  update?: Maybe<UserUpdateWithoutFavoriteDataInput>;
  upsert?: Maybe<UserUpsertWithoutFavoriteInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutFavoriteDataInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  review?: Maybe<ReviewUpdateManyWithoutPostedByInput>;
}

export interface ReviewUpdateManyWithoutPostedByInput {
  create?: Maybe<
    ReviewCreateWithoutPostedByInput[] | ReviewCreateWithoutPostedByInput
  >;
  delete?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  connect?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  set?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  disconnect?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  update?: Maybe<
    | ReviewUpdateWithWhereUniqueWithoutPostedByInput[]
    | ReviewUpdateWithWhereUniqueWithoutPostedByInput
  >;
  upsert?: Maybe<
    | ReviewUpsertWithWhereUniqueWithoutPostedByInput[]
    | ReviewUpsertWithWhereUniqueWithoutPostedByInput
  >;
  deleteMany?: Maybe<ReviewScalarWhereInput[] | ReviewScalarWhereInput>;
  updateMany?: Maybe<
    | ReviewUpdateManyWithWhereNestedInput[]
    | ReviewUpdateManyWithWhereNestedInput
  >;
}

export interface ReviewUpdateWithWhereUniqueWithoutPostedByInput {
  where: ReviewWhereUniqueInput;
  data: ReviewUpdateWithoutPostedByDataInput;
}

export interface ReviewUpdateWithoutPostedByDataInput {
  text?: Maybe<String>;
  rating?: Maybe<Int>;
  postedAt?: Maybe<AddressUpdateOneRequiredWithoutReviewInput>;
}

export interface AddressUpdateOneRequiredWithoutReviewInput {
  create?: Maybe<AddressCreateWithoutReviewInput>;
  update?: Maybe<AddressUpdateWithoutReviewDataInput>;
  upsert?: Maybe<AddressUpsertWithoutReviewInput>;
  connect?: Maybe<AddressWhereUniqueInput>;
}

export interface AddressUpdateWithoutReviewDataInput {
  detail?: Maybe<String>;
  X?: Maybe<Float>;
  Y?: Maybe<Float>;
  gu?: Maybe<String>;
  rn?: Maybe<String>;
  favorite?: Maybe<FavoriteUpdateManyWithoutPostedAtInput>;
}

export interface AddressUpsertWithoutReviewInput {
  update: AddressUpdateWithoutReviewDataInput;
  create: AddressCreateWithoutReviewInput;
}

export interface ReviewUpsertWithWhereUniqueWithoutPostedByInput {
  where: ReviewWhereUniqueInput;
  update: ReviewUpdateWithoutPostedByDataInput;
  create: ReviewCreateWithoutPostedByInput;
}

export interface UserUpsertWithoutFavoriteInput {
  update: UserUpdateWithoutFavoriteDataInput;
  create: UserCreateWithoutFavoriteInput;
}

export interface FavoriteUpsertWithWhereUniqueWithoutPostedAtInput {
  where: FavoriteWhereUniqueInput;
  update: FavoriteUpdateWithoutPostedAtDataInput;
  create: FavoriteCreateWithoutPostedAtInput;
}

export interface AddressUpdateManyMutationInput {
  detail?: Maybe<String>;
  X?: Maybe<Float>;
  Y?: Maybe<Float>;
  gu?: Maybe<String>;
  rn?: Maybe<String>;
}

export interface CrimeCreateInput {
  id?: Maybe<ID_Input>;
  gu: String;
  murder: Int;
  robbery: Int;
  rape: Int;
  theft: Int;
  violence: Int;
}

export interface CrimeUpdateInput {
  gu?: Maybe<String>;
  murder?: Maybe<Int>;
  robbery?: Maybe<Int>;
  rape?: Maybe<Int>;
  theft?: Maybe<Int>;
  violence?: Maybe<Int>;
}

export interface CrimeUpdateManyMutationInput {
  gu?: Maybe<String>;
  murder?: Maybe<Int>;
  robbery?: Maybe<Int>;
  rape?: Maybe<Int>;
  theft?: Maybe<Int>;
  violence?: Maybe<Int>;
}

export interface FavoriteCreateInput {
  id?: Maybe<ID_Input>;
  aliasInput: String;
  postedBy: UserCreateOneWithoutFavoriteInput;
  postedAt: AddressCreateOneWithoutFavoriteInput;
}

export interface FavoriteUpdateInput {
  aliasInput?: Maybe<String>;
  postedBy?: Maybe<UserUpdateOneRequiredWithoutFavoriteInput>;
  postedAt?: Maybe<AddressUpdateOneRequiredWithoutFavoriteInput>;
}

export interface FavoriteUpdateManyMutationInput {
  aliasInput?: Maybe<String>;
}

export interface ReviewCreateInput {
  id?: Maybe<ID_Input>;
  text: String;
  rating: Int;
  postedBy: UserCreateOneWithoutReviewInput;
  postedAt: AddressCreateOneWithoutReviewInput;
}

export interface ReviewUpdateInput {
  text?: Maybe<String>;
  rating?: Maybe<Int>;
  postedBy?: Maybe<UserUpdateOneRequiredWithoutReviewInput>;
  postedAt?: Maybe<AddressUpdateOneRequiredWithoutReviewInput>;
}

export interface ReviewUpdateManyMutationInput {
  text?: Maybe<String>;
  rating?: Maybe<Int>;
}

export interface StationCreateInput {
  id?: Maybe<ID_Input>;
  stationName: String;
  X: Float;
  Y: Float;
  stationAddress: String;
}

export interface StationUpdateInput {
  stationName?: Maybe<String>;
  X?: Maybe<Float>;
  Y?: Maybe<Float>;
  stationAddress?: Maybe<String>;
}

export interface StationUpdateManyMutationInput {
  stationName?: Maybe<String>;
  X?: Maybe<Float>;
  Y?: Maybe<Float>;
  stationAddress?: Maybe<String>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
  review?: Maybe<ReviewCreateManyWithoutPostedByInput>;
  favorite?: Maybe<FavoriteCreateManyWithoutPostedByInput>;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  review?: Maybe<ReviewUpdateManyWithoutPostedByInput>;
  favorite?: Maybe<FavoriteUpdateManyWithoutPostedByInput>;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
}

export interface AddressSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AddressWhereInput>;
  AND?: Maybe<AddressSubscriptionWhereInput[] | AddressSubscriptionWhereInput>;
  OR?: Maybe<AddressSubscriptionWhereInput[] | AddressSubscriptionWhereInput>;
  NOT?: Maybe<AddressSubscriptionWhereInput[] | AddressSubscriptionWhereInput>;
}

export interface CrimeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CrimeWhereInput>;
  AND?: Maybe<CrimeSubscriptionWhereInput[] | CrimeSubscriptionWhereInput>;
  OR?: Maybe<CrimeSubscriptionWhereInput[] | CrimeSubscriptionWhereInput>;
  NOT?: Maybe<CrimeSubscriptionWhereInput[] | CrimeSubscriptionWhereInput>;
}

export interface FavoriteSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<FavoriteWhereInput>;
  AND?: Maybe<
    FavoriteSubscriptionWhereInput[] | FavoriteSubscriptionWhereInput
  >;
  OR?: Maybe<FavoriteSubscriptionWhereInput[] | FavoriteSubscriptionWhereInput>;
  NOT?: Maybe<
    FavoriteSubscriptionWhereInput[] | FavoriteSubscriptionWhereInput
  >;
}

export interface ReviewSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ReviewWhereInput>;
  AND?: Maybe<ReviewSubscriptionWhereInput[] | ReviewSubscriptionWhereInput>;
  OR?: Maybe<ReviewSubscriptionWhereInput[] | ReviewSubscriptionWhereInput>;
  NOT?: Maybe<ReviewSubscriptionWhereInput[] | ReviewSubscriptionWhereInput>;
}

export interface StationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<StationWhereInput>;
  AND?: Maybe<StationSubscriptionWhereInput[] | StationSubscriptionWhereInput>;
  OR?: Maybe<StationSubscriptionWhereInput[] | StationSubscriptionWhereInput>;
  NOT?: Maybe<StationSubscriptionWhereInput[] | StationSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Address {
  id: ID_Output;
  detail: String;
  X: Float;
  Y: Float;
  gu: String;
  rn: String;
}

export interface AddressPromise extends Promise<Address>, Fragmentable {
  id: () => Promise<ID_Output>;
  detail: () => Promise<String>;
  X: () => Promise<Float>;
  Y: () => Promise<Float>;
  gu: () => Promise<String>;
  rn: () => Promise<String>;
  review: <T = FragmentableArray<Review>>(args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  favorite: <T = FragmentableArray<Favorite>>(args?: {
    where?: FavoriteWhereInput;
    orderBy?: FavoriteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AddressSubscription
  extends Promise<AsyncIterator<Address>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  detail: () => Promise<AsyncIterator<String>>;
  X: () => Promise<AsyncIterator<Float>>;
  Y: () => Promise<AsyncIterator<Float>>;
  gu: () => Promise<AsyncIterator<String>>;
  rn: () => Promise<AsyncIterator<String>>;
  review: <T = Promise<AsyncIterator<ReviewSubscription>>>(args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  favorite: <T = Promise<AsyncIterator<FavoriteSubscription>>>(args?: {
    where?: FavoriteWhereInput;
    orderBy?: FavoriteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AddressNullablePromise
  extends Promise<Address | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  detail: () => Promise<String>;
  X: () => Promise<Float>;
  Y: () => Promise<Float>;
  gu: () => Promise<String>;
  rn: () => Promise<String>;
  review: <T = FragmentableArray<Review>>(args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  favorite: <T = FragmentableArray<Favorite>>(args?: {
    where?: FavoriteWhereInput;
    orderBy?: FavoriteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Review {
  id: ID_Output;
  text: String;
  rating: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ReviewPromise extends Promise<Review>, Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  rating: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  postedBy: <T = UserPromise>() => T;
  postedAt: <T = AddressPromise>() => T;
}

export interface ReviewSubscription
  extends Promise<AsyncIterator<Review>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  rating: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  postedBy: <T = UserSubscription>() => T;
  postedAt: <T = AddressSubscription>() => T;
}

export interface ReviewNullablePromise
  extends Promise<Review | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  rating: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  postedBy: <T = UserPromise>() => T;
  postedAt: <T = AddressPromise>() => T;
}

export interface User {
  id: ID_Output;
  email: String;
  password: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  review: <T = FragmentableArray<Review>>(args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  favorite: <T = FragmentableArray<Favorite>>(args?: {
    where?: FavoriteWhereInput;
    orderBy?: FavoriteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  review: <T = Promise<AsyncIterator<ReviewSubscription>>>(args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  favorite: <T = Promise<AsyncIterator<FavoriteSubscription>>>(args?: {
    where?: FavoriteWhereInput;
    orderBy?: FavoriteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  review: <T = FragmentableArray<Review>>(args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  favorite: <T = FragmentableArray<Favorite>>(args?: {
    where?: FavoriteWhereInput;
    orderBy?: FavoriteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Favorite {
  id: ID_Output;
  aliasInput: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface FavoritePromise extends Promise<Favorite>, Fragmentable {
  id: () => Promise<ID_Output>;
  aliasInput: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  postedBy: <T = UserPromise>() => T;
  postedAt: <T = AddressPromise>() => T;
}

export interface FavoriteSubscription
  extends Promise<AsyncIterator<Favorite>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  aliasInput: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  postedBy: <T = UserSubscription>() => T;
  postedAt: <T = AddressSubscription>() => T;
}

export interface FavoriteNullablePromise
  extends Promise<Favorite | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  aliasInput: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  postedBy: <T = UserPromise>() => T;
  postedAt: <T = AddressPromise>() => T;
}

export interface AddressConnection {
  pageInfo: PageInfo;
  edges: AddressEdge[];
}

export interface AddressConnectionPromise
  extends Promise<AddressConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AddressEdge>>() => T;
  aggregate: <T = AggregateAddressPromise>() => T;
}

export interface AddressConnectionSubscription
  extends Promise<AsyncIterator<AddressConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AddressEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAddressSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AddressEdge {
  node: Address;
  cursor: String;
}

export interface AddressEdgePromise extends Promise<AddressEdge>, Fragmentable {
  node: <T = AddressPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AddressEdgeSubscription
  extends Promise<AsyncIterator<AddressEdge>>,
    Fragmentable {
  node: <T = AddressSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAddress {
  count: Int;
}

export interface AggregateAddressPromise
  extends Promise<AggregateAddress>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAddressSubscription
  extends Promise<AsyncIterator<AggregateAddress>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Crime {
  id: ID_Output;
  gu: String;
  murder: Int;
  robbery: Int;
  rape: Int;
  theft: Int;
  violence: Int;
}

export interface CrimePromise extends Promise<Crime>, Fragmentable {
  id: () => Promise<ID_Output>;
  gu: () => Promise<String>;
  murder: () => Promise<Int>;
  robbery: () => Promise<Int>;
  rape: () => Promise<Int>;
  theft: () => Promise<Int>;
  violence: () => Promise<Int>;
}

export interface CrimeSubscription
  extends Promise<AsyncIterator<Crime>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  gu: () => Promise<AsyncIterator<String>>;
  murder: () => Promise<AsyncIterator<Int>>;
  robbery: () => Promise<AsyncIterator<Int>>;
  rape: () => Promise<AsyncIterator<Int>>;
  theft: () => Promise<AsyncIterator<Int>>;
  violence: () => Promise<AsyncIterator<Int>>;
}

export interface CrimeNullablePromise
  extends Promise<Crime | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  gu: () => Promise<String>;
  murder: () => Promise<Int>;
  robbery: () => Promise<Int>;
  rape: () => Promise<Int>;
  theft: () => Promise<Int>;
  violence: () => Promise<Int>;
}

export interface CrimeConnection {
  pageInfo: PageInfo;
  edges: CrimeEdge[];
}

export interface CrimeConnectionPromise
  extends Promise<CrimeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CrimeEdge>>() => T;
  aggregate: <T = AggregateCrimePromise>() => T;
}

export interface CrimeConnectionSubscription
  extends Promise<AsyncIterator<CrimeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CrimeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCrimeSubscription>() => T;
}

export interface CrimeEdge {
  node: Crime;
  cursor: String;
}

export interface CrimeEdgePromise extends Promise<CrimeEdge>, Fragmentable {
  node: <T = CrimePromise>() => T;
  cursor: () => Promise<String>;
}

export interface CrimeEdgeSubscription
  extends Promise<AsyncIterator<CrimeEdge>>,
    Fragmentable {
  node: <T = CrimeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCrime {
  count: Int;
}

export interface AggregateCrimePromise
  extends Promise<AggregateCrime>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCrimeSubscription
  extends Promise<AsyncIterator<AggregateCrime>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FavoriteConnection {
  pageInfo: PageInfo;
  edges: FavoriteEdge[];
}

export interface FavoriteConnectionPromise
  extends Promise<FavoriteConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FavoriteEdge>>() => T;
  aggregate: <T = AggregateFavoritePromise>() => T;
}

export interface FavoriteConnectionSubscription
  extends Promise<AsyncIterator<FavoriteConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FavoriteEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFavoriteSubscription>() => T;
}

export interface FavoriteEdge {
  node: Favorite;
  cursor: String;
}

export interface FavoriteEdgePromise
  extends Promise<FavoriteEdge>,
    Fragmentable {
  node: <T = FavoritePromise>() => T;
  cursor: () => Promise<String>;
}

export interface FavoriteEdgeSubscription
  extends Promise<AsyncIterator<FavoriteEdge>>,
    Fragmentable {
  node: <T = FavoriteSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateFavorite {
  count: Int;
}

export interface AggregateFavoritePromise
  extends Promise<AggregateFavorite>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFavoriteSubscription
  extends Promise<AsyncIterator<AggregateFavorite>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ReviewConnection {
  pageInfo: PageInfo;
  edges: ReviewEdge[];
}

export interface ReviewConnectionPromise
  extends Promise<ReviewConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ReviewEdge>>() => T;
  aggregate: <T = AggregateReviewPromise>() => T;
}

export interface ReviewConnectionSubscription
  extends Promise<AsyncIterator<ReviewConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ReviewEdgeSubscription>>>() => T;
  aggregate: <T = AggregateReviewSubscription>() => T;
}

export interface ReviewEdge {
  node: Review;
  cursor: String;
}

export interface ReviewEdgePromise extends Promise<ReviewEdge>, Fragmentable {
  node: <T = ReviewPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ReviewEdgeSubscription
  extends Promise<AsyncIterator<ReviewEdge>>,
    Fragmentable {
  node: <T = ReviewSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateReview {
  count: Int;
}

export interface AggregateReviewPromise
  extends Promise<AggregateReview>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateReviewSubscription
  extends Promise<AsyncIterator<AggregateReview>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Station {
  id: ID_Output;
  stationName: String;
  X: Float;
  Y: Float;
  stationAddress: String;
}

export interface StationPromise extends Promise<Station>, Fragmentable {
  id: () => Promise<ID_Output>;
  stationName: () => Promise<String>;
  X: () => Promise<Float>;
  Y: () => Promise<Float>;
  stationAddress: () => Promise<String>;
}

export interface StationSubscription
  extends Promise<AsyncIterator<Station>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  stationName: () => Promise<AsyncIterator<String>>;
  X: () => Promise<AsyncIterator<Float>>;
  Y: () => Promise<AsyncIterator<Float>>;
  stationAddress: () => Promise<AsyncIterator<String>>;
}

export interface StationNullablePromise
  extends Promise<Station | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  stationName: () => Promise<String>;
  X: () => Promise<Float>;
  Y: () => Promise<Float>;
  stationAddress: () => Promise<String>;
}

export interface StationConnection {
  pageInfo: PageInfo;
  edges: StationEdge[];
}

export interface StationConnectionPromise
  extends Promise<StationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<StationEdge>>() => T;
  aggregate: <T = AggregateStationPromise>() => T;
}

export interface StationConnectionSubscription
  extends Promise<AsyncIterator<StationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<StationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateStationSubscription>() => T;
}

export interface StationEdge {
  node: Station;
  cursor: String;
}

export interface StationEdgePromise extends Promise<StationEdge>, Fragmentable {
  node: <T = StationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface StationEdgeSubscription
  extends Promise<AsyncIterator<StationEdge>>,
    Fragmentable {
  node: <T = StationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateStation {
  count: Int;
}

export interface AggregateStationPromise
  extends Promise<AggregateStation>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateStationSubscription
  extends Promise<AsyncIterator<AggregateStation>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AddressSubscriptionPayload {
  mutation: MutationType;
  node: Address;
  updatedFields: String[];
  previousValues: AddressPreviousValues;
}

export interface AddressSubscriptionPayloadPromise
  extends Promise<AddressSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AddressPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AddressPreviousValuesPromise>() => T;
}

export interface AddressSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AddressSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AddressSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AddressPreviousValuesSubscription>() => T;
}

export interface AddressPreviousValues {
  id: ID_Output;
  detail: String;
  X: Float;
  Y: Float;
  gu: String;
  rn: String;
}

export interface AddressPreviousValuesPromise
  extends Promise<AddressPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  detail: () => Promise<String>;
  X: () => Promise<Float>;
  Y: () => Promise<Float>;
  gu: () => Promise<String>;
  rn: () => Promise<String>;
}

export interface AddressPreviousValuesSubscription
  extends Promise<AsyncIterator<AddressPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  detail: () => Promise<AsyncIterator<String>>;
  X: () => Promise<AsyncIterator<Float>>;
  Y: () => Promise<AsyncIterator<Float>>;
  gu: () => Promise<AsyncIterator<String>>;
  rn: () => Promise<AsyncIterator<String>>;
}

export interface CrimeSubscriptionPayload {
  mutation: MutationType;
  node: Crime;
  updatedFields: String[];
  previousValues: CrimePreviousValues;
}

export interface CrimeSubscriptionPayloadPromise
  extends Promise<CrimeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CrimePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CrimePreviousValuesPromise>() => T;
}

export interface CrimeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CrimeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CrimeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CrimePreviousValuesSubscription>() => T;
}

export interface CrimePreviousValues {
  id: ID_Output;
  gu: String;
  murder: Int;
  robbery: Int;
  rape: Int;
  theft: Int;
  violence: Int;
}

export interface CrimePreviousValuesPromise
  extends Promise<CrimePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  gu: () => Promise<String>;
  murder: () => Promise<Int>;
  robbery: () => Promise<Int>;
  rape: () => Promise<Int>;
  theft: () => Promise<Int>;
  violence: () => Promise<Int>;
}

export interface CrimePreviousValuesSubscription
  extends Promise<AsyncIterator<CrimePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  gu: () => Promise<AsyncIterator<String>>;
  murder: () => Promise<AsyncIterator<Int>>;
  robbery: () => Promise<AsyncIterator<Int>>;
  rape: () => Promise<AsyncIterator<Int>>;
  theft: () => Promise<AsyncIterator<Int>>;
  violence: () => Promise<AsyncIterator<Int>>;
}

export interface FavoriteSubscriptionPayload {
  mutation: MutationType;
  node: Favorite;
  updatedFields: String[];
  previousValues: FavoritePreviousValues;
}

export interface FavoriteSubscriptionPayloadPromise
  extends Promise<FavoriteSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FavoritePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FavoritePreviousValuesPromise>() => T;
}

export interface FavoriteSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FavoriteSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FavoriteSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FavoritePreviousValuesSubscription>() => T;
}

export interface FavoritePreviousValues {
  id: ID_Output;
  aliasInput: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface FavoritePreviousValuesPromise
  extends Promise<FavoritePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  aliasInput: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface FavoritePreviousValuesSubscription
  extends Promise<AsyncIterator<FavoritePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  aliasInput: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ReviewSubscriptionPayload {
  mutation: MutationType;
  node: Review;
  updatedFields: String[];
  previousValues: ReviewPreviousValues;
}

export interface ReviewSubscriptionPayloadPromise
  extends Promise<ReviewSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ReviewPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ReviewPreviousValuesPromise>() => T;
}

export interface ReviewSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ReviewSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ReviewSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ReviewPreviousValuesSubscription>() => T;
}

export interface ReviewPreviousValues {
  id: ID_Output;
  text: String;
  rating: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ReviewPreviousValuesPromise
  extends Promise<ReviewPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  rating: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ReviewPreviousValuesSubscription
  extends Promise<AsyncIterator<ReviewPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  rating: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface StationSubscriptionPayload {
  mutation: MutationType;
  node: Station;
  updatedFields: String[];
  previousValues: StationPreviousValues;
}

export interface StationSubscriptionPayloadPromise
  extends Promise<StationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = StationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = StationPreviousValuesPromise>() => T;
}

export interface StationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<StationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = StationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = StationPreviousValuesSubscription>() => T;
}

export interface StationPreviousValues {
  id: ID_Output;
  stationName: String;
  X: Float;
  Y: Float;
  stationAddress: String;
}

export interface StationPreviousValuesPromise
  extends Promise<StationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  stationName: () => Promise<String>;
  X: () => Promise<Float>;
  Y: () => Promise<Float>;
  stationAddress: () => Promise<String>;
}

export interface StationPreviousValuesSubscription
  extends Promise<AsyncIterator<StationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  stationName: () => Promise<AsyncIterator<String>>;
  X: () => Promise<AsyncIterator<Float>>;
  Y: () => Promise<AsyncIterator<Float>>;
  stationAddress: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  password: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Review",
    embedded: false
  },
  {
    name: "Favorite",
    embedded: false
  },
  {
    name: "Address",
    embedded: false
  },
  {
    name: "Station",
    embedded: false
  },
  {
    name: "Crime",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
