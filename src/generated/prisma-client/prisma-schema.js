module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateCrime {
  count: Int!
}

type AggregateStation {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Crime {
  id: ID!
  gu: String!
  murder: Int!
  robbery: Int!
  rape: Int!
  theft: Int!
  violence: Int!
}

type CrimeConnection {
  pageInfo: PageInfo!
  edges: [CrimeEdge]!
  aggregate: AggregateCrime!
}

input CrimeCreateInput {
  id: ID
  gu: String!
  murder: Int!
  robbery: Int!
  rape: Int!
  theft: Int!
  violence: Int!
}

type CrimeEdge {
  node: Crime!
  cursor: String!
}

enum CrimeOrderByInput {
  id_ASC
  id_DESC
  gu_ASC
  gu_DESC
  murder_ASC
  murder_DESC
  robbery_ASC
  robbery_DESC
  rape_ASC
  rape_DESC
  theft_ASC
  theft_DESC
  violence_ASC
  violence_DESC
}

type CrimePreviousValues {
  id: ID!
  gu: String!
  murder: Int!
  robbery: Int!
  rape: Int!
  theft: Int!
  violence: Int!
}

type CrimeSubscriptionPayload {
  mutation: MutationType!
  node: Crime
  updatedFields: [String!]
  previousValues: CrimePreviousValues
}

input CrimeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CrimeWhereInput
  AND: [CrimeSubscriptionWhereInput!]
  OR: [CrimeSubscriptionWhereInput!]
  NOT: [CrimeSubscriptionWhereInput!]
}

input CrimeUpdateInput {
  gu: String
  murder: Int
  robbery: Int
  rape: Int
  theft: Int
  violence: Int
}

input CrimeUpdateManyMutationInput {
  gu: String
  murder: Int
  robbery: Int
  rape: Int
  theft: Int
  violence: Int
}

input CrimeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  gu: String
  gu_not: String
  gu_in: [String!]
  gu_not_in: [String!]
  gu_lt: String
  gu_lte: String
  gu_gt: String
  gu_gte: String
  gu_contains: String
  gu_not_contains: String
  gu_starts_with: String
  gu_not_starts_with: String
  gu_ends_with: String
  gu_not_ends_with: String
  murder: Int
  murder_not: Int
  murder_in: [Int!]
  murder_not_in: [Int!]
  murder_lt: Int
  murder_lte: Int
  murder_gt: Int
  murder_gte: Int
  robbery: Int
  robbery_not: Int
  robbery_in: [Int!]
  robbery_not_in: [Int!]
  robbery_lt: Int
  robbery_lte: Int
  robbery_gt: Int
  robbery_gte: Int
  rape: Int
  rape_not: Int
  rape_in: [Int!]
  rape_not_in: [Int!]
  rape_lt: Int
  rape_lte: Int
  rape_gt: Int
  rape_gte: Int
  theft: Int
  theft_not: Int
  theft_in: [Int!]
  theft_not_in: [Int!]
  theft_lt: Int
  theft_lte: Int
  theft_gt: Int
  theft_gte: Int
  violence: Int
  violence_not: Int
  violence_in: [Int!]
  violence_not_in: [Int!]
  violence_lt: Int
  violence_lte: Int
  violence_gt: Int
  violence_gte: Int
  AND: [CrimeWhereInput!]
  OR: [CrimeWhereInput!]
  NOT: [CrimeWhereInput!]
}

input CrimeWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createCrime(data: CrimeCreateInput!): Crime!
  updateCrime(data: CrimeUpdateInput!, where: CrimeWhereUniqueInput!): Crime
  updateManyCrimes(data: CrimeUpdateManyMutationInput!, where: CrimeWhereInput): BatchPayload!
  upsertCrime(where: CrimeWhereUniqueInput!, create: CrimeCreateInput!, update: CrimeUpdateInput!): Crime!
  deleteCrime(where: CrimeWhereUniqueInput!): Crime
  deleteManyCrimes(where: CrimeWhereInput): BatchPayload!
  createStation(data: StationCreateInput!): Station!
  updateStation(data: StationUpdateInput!, where: StationWhereUniqueInput!): Station
  updateManyStations(data: StationUpdateManyMutationInput!, where: StationWhereInput): BatchPayload!
  upsertStation(where: StationWhereUniqueInput!, create: StationCreateInput!, update: StationUpdateInput!): Station!
  deleteStation(where: StationWhereUniqueInput!): Station
  deleteManyStations(where: StationWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  crime(where: CrimeWhereUniqueInput!): Crime
  crimes(where: CrimeWhereInput, orderBy: CrimeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Crime]!
  crimesConnection(where: CrimeWhereInput, orderBy: CrimeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CrimeConnection!
  station(where: StationWhereUniqueInput!): Station
  stations(where: StationWhereInput, orderBy: StationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Station]!
  stationsConnection(where: StationWhereInput, orderBy: StationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StationConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Station {
  id: ID!
  stationName: String!
  X: Float!
  Y: Float!
  stationAddress: String!
}

type StationConnection {
  pageInfo: PageInfo!
  edges: [StationEdge]!
  aggregate: AggregateStation!
}

input StationCreateInput {
  id: ID
  stationName: String!
  X: Float!
  Y: Float!
  stationAddress: String!
}

type StationEdge {
  node: Station!
  cursor: String!
}

enum StationOrderByInput {
  id_ASC
  id_DESC
  stationName_ASC
  stationName_DESC
  X_ASC
  X_DESC
  Y_ASC
  Y_DESC
  stationAddress_ASC
  stationAddress_DESC
}

type StationPreviousValues {
  id: ID!
  stationName: String!
  X: Float!
  Y: Float!
  stationAddress: String!
}

type StationSubscriptionPayload {
  mutation: MutationType!
  node: Station
  updatedFields: [String!]
  previousValues: StationPreviousValues
}

input StationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: StationWhereInput
  AND: [StationSubscriptionWhereInput!]
  OR: [StationSubscriptionWhereInput!]
  NOT: [StationSubscriptionWhereInput!]
}

input StationUpdateInput {
  stationName: String
  X: Float
  Y: Float
  stationAddress: String
}

input StationUpdateManyMutationInput {
  stationName: String
  X: Float
  Y: Float
  stationAddress: String
}

input StationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  stationName: String
  stationName_not: String
  stationName_in: [String!]
  stationName_not_in: [String!]
  stationName_lt: String
  stationName_lte: String
  stationName_gt: String
  stationName_gte: String
  stationName_contains: String
  stationName_not_contains: String
  stationName_starts_with: String
  stationName_not_starts_with: String
  stationName_ends_with: String
  stationName_not_ends_with: String
  X: Float
  X_not: Float
  X_in: [Float!]
  X_not_in: [Float!]
  X_lt: Float
  X_lte: Float
  X_gt: Float
  X_gte: Float
  Y: Float
  Y_not: Float
  Y_in: [Float!]
  Y_not_in: [Float!]
  Y_lt: Float
  Y_lte: Float
  Y_gt: Float
  Y_gte: Float
  stationAddress: String
  stationAddress_not: String
  stationAddress_in: [String!]
  stationAddress_not_in: [String!]
  stationAddress_lt: String
  stationAddress_lte: String
  stationAddress_gt: String
  stationAddress_gte: String
  stationAddress_contains: String
  stationAddress_not_contains: String
  stationAddress_starts_with: String
  stationAddress_not_starts_with: String
  stationAddress_ends_with: String
  stationAddress_not_ends_with: String
  AND: [StationWhereInput!]
  OR: [StationWhereInput!]
  NOT: [StationWhereInput!]
}

input StationWhereUniqueInput {
  id: ID
}

type Subscription {
  crime(where: CrimeSubscriptionWhereInput): CrimeSubscriptionPayload
  station(where: StationSubscriptionWhereInput): StationSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  email: String!
  password: String!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  email: String!
  password: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  email: String
  password: String
}

input UserUpdateManyMutationInput {
  email: String
  password: String
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    