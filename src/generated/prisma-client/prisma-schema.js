module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type Address {
  id: ID!
  detail: String!
  X: Float!
  Y: Float!
  gu: String!
  rn: String!
  review(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Review!]
  favorite(where: FavoriteWhereInput, orderBy: FavoriteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Favorite!]
}

type AddressConnection {
  pageInfo: PageInfo!
  edges: [AddressEdge]!
  aggregate: AggregateAddress!
}

input AddressCreateInput {
  id: ID
  detail: String!
  X: Float!
  Y: Float!
  gu: String!
  rn: String!
  review: ReviewCreateManyWithoutPostedAtInput
  favorite: FavoriteCreateManyWithoutPostedAtInput
}

input AddressCreateOneWithoutFavoriteInput {
  create: AddressCreateWithoutFavoriteInput
  connect: AddressWhereUniqueInput
}

input AddressCreateOneWithoutReviewInput {
  create: AddressCreateWithoutReviewInput
  connect: AddressWhereUniqueInput
}

input AddressCreateWithoutFavoriteInput {
  id: ID
  detail: String!
  X: Float!
  Y: Float!
  gu: String!
  rn: String!
  review: ReviewCreateManyWithoutPostedAtInput
}

input AddressCreateWithoutReviewInput {
  id: ID
  detail: String!
  X: Float!
  Y: Float!
  gu: String!
  rn: String!
  favorite: FavoriteCreateManyWithoutPostedAtInput
}

type AddressEdge {
  node: Address!
  cursor: String!
}

enum AddressOrderByInput {
  id_ASC
  id_DESC
  detail_ASC
  detail_DESC
  X_ASC
  X_DESC
  Y_ASC
  Y_DESC
  gu_ASC
  gu_DESC
  rn_ASC
  rn_DESC
}

type AddressPreviousValues {
  id: ID!
  detail: String!
  X: Float!
  Y: Float!
  gu: String!
  rn: String!
}

type AddressSubscriptionPayload {
  mutation: MutationType!
  node: Address
  updatedFields: [String!]
  previousValues: AddressPreviousValues
}

input AddressSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AddressWhereInput
  AND: [AddressSubscriptionWhereInput!]
  OR: [AddressSubscriptionWhereInput!]
  NOT: [AddressSubscriptionWhereInput!]
}

input AddressUpdateInput {
  detail: String
  X: Float
  Y: Float
  gu: String
  rn: String
  review: ReviewUpdateManyWithoutPostedAtInput
  favorite: FavoriteUpdateManyWithoutPostedAtInput
}

input AddressUpdateManyMutationInput {
  detail: String
  X: Float
  Y: Float
  gu: String
  rn: String
}

input AddressUpdateOneRequiredWithoutFavoriteInput {
  create: AddressCreateWithoutFavoriteInput
  update: AddressUpdateWithoutFavoriteDataInput
  upsert: AddressUpsertWithoutFavoriteInput
  connect: AddressWhereUniqueInput
}

input AddressUpdateOneRequiredWithoutReviewInput {
  create: AddressCreateWithoutReviewInput
  update: AddressUpdateWithoutReviewDataInput
  upsert: AddressUpsertWithoutReviewInput
  connect: AddressWhereUniqueInput
}

input AddressUpdateWithoutFavoriteDataInput {
  detail: String
  X: Float
  Y: Float
  gu: String
  rn: String
  review: ReviewUpdateManyWithoutPostedAtInput
}

input AddressUpdateWithoutReviewDataInput {
  detail: String
  X: Float
  Y: Float
  gu: String
  rn: String
  favorite: FavoriteUpdateManyWithoutPostedAtInput
}

input AddressUpsertWithoutFavoriteInput {
  update: AddressUpdateWithoutFavoriteDataInput!
  create: AddressCreateWithoutFavoriteInput!
}

input AddressUpsertWithoutReviewInput {
  update: AddressUpdateWithoutReviewDataInput!
  create: AddressCreateWithoutReviewInput!
}

input AddressWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  detail: String
  detail_not: String
  detail_in: [String!]
  detail_not_in: [String!]
  detail_lt: String
  detail_lte: String
  detail_gt: String
  detail_gte: String
  detail_contains: String
  detail_not_contains: String
  detail_starts_with: String
  detail_not_starts_with: String
  detail_ends_with: String
  detail_not_ends_with: String
  X: Float
  X_not: Float
  X_in: [Float!]
  X_not_in: [Float!]
  X_lt: Float
  X_lte: Float
  X_gt: Float
  X_gte: Float
  Y: Float
  Y_not: Float
  Y_in: [Float!]
  Y_not_in: [Float!]
  Y_lt: Float
  Y_lte: Float
  Y_gt: Float
  Y_gte: Float
  gu: String
  gu_not: String
  gu_in: [String!]
  gu_not_in: [String!]
  gu_lt: String
  gu_lte: String
  gu_gt: String
  gu_gte: String
  gu_contains: String
  gu_not_contains: String
  gu_starts_with: String
  gu_not_starts_with: String
  gu_ends_with: String
  gu_not_ends_with: String
  rn: String
  rn_not: String
  rn_in: [String!]
  rn_not_in: [String!]
  rn_lt: String
  rn_lte: String
  rn_gt: String
  rn_gte: String
  rn_contains: String
  rn_not_contains: String
  rn_starts_with: String
  rn_not_starts_with: String
  rn_ends_with: String
  rn_not_ends_with: String
  review_every: ReviewWhereInput
  review_some: ReviewWhereInput
  review_none: ReviewWhereInput
  favorite_every: FavoriteWhereInput
  favorite_some: FavoriteWhereInput
  favorite_none: FavoriteWhereInput
  AND: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  NOT: [AddressWhereInput!]
}

input AddressWhereUniqueInput {
  id: ID
}

type AggregateAddress {
  count: Int!
}

type AggregateCrime {
  count: Int!
}

type AggregateFavorite {
  count: Int!
}

type AggregateReview {
  count: Int!
}

type AggregateStation {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Crime {
  id: ID!
  gu: String!
  murder: Int!
  robbery: Int!
  rape: Int!
  theft: Int!
  violence: Int!
}

type CrimeConnection {
  pageInfo: PageInfo!
  edges: [CrimeEdge]!
  aggregate: AggregateCrime!
}

input CrimeCreateInput {
  id: ID
  gu: String!
  murder: Int!
  robbery: Int!
  rape: Int!
  theft: Int!
  violence: Int!
}

type CrimeEdge {
  node: Crime!
  cursor: String!
}

enum CrimeOrderByInput {
  id_ASC
  id_DESC
  gu_ASC
  gu_DESC
  murder_ASC
  murder_DESC
  robbery_ASC
  robbery_DESC
  rape_ASC
  rape_DESC
  theft_ASC
  theft_DESC
  violence_ASC
  violence_DESC
}

type CrimePreviousValues {
  id: ID!
  gu: String!
  murder: Int!
  robbery: Int!
  rape: Int!
  theft: Int!
  violence: Int!
}

type CrimeSubscriptionPayload {
  mutation: MutationType!
  node: Crime
  updatedFields: [String!]
  previousValues: CrimePreviousValues
}

input CrimeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CrimeWhereInput
  AND: [CrimeSubscriptionWhereInput!]
  OR: [CrimeSubscriptionWhereInput!]
  NOT: [CrimeSubscriptionWhereInput!]
}

input CrimeUpdateInput {
  gu: String
  murder: Int
  robbery: Int
  rape: Int
  theft: Int
  violence: Int
}

input CrimeUpdateManyMutationInput {
  gu: String
  murder: Int
  robbery: Int
  rape: Int
  theft: Int
  violence: Int
}

input CrimeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  gu: String
  gu_not: String
  gu_in: [String!]
  gu_not_in: [String!]
  gu_lt: String
  gu_lte: String
  gu_gt: String
  gu_gte: String
  gu_contains: String
  gu_not_contains: String
  gu_starts_with: String
  gu_not_starts_with: String
  gu_ends_with: String
  gu_not_ends_with: String
  murder: Int
  murder_not: Int
  murder_in: [Int!]
  murder_not_in: [Int!]
  murder_lt: Int
  murder_lte: Int
  murder_gt: Int
  murder_gte: Int
  robbery: Int
  robbery_not: Int
  robbery_in: [Int!]
  robbery_not_in: [Int!]
  robbery_lt: Int
  robbery_lte: Int
  robbery_gt: Int
  robbery_gte: Int
  rape: Int
  rape_not: Int
  rape_in: [Int!]
  rape_not_in: [Int!]
  rape_lt: Int
  rape_lte: Int
  rape_gt: Int
  rape_gte: Int
  theft: Int
  theft_not: Int
  theft_in: [Int!]
  theft_not_in: [Int!]
  theft_lt: Int
  theft_lte: Int
  theft_gt: Int
  theft_gte: Int
  violence: Int
  violence_not: Int
  violence_in: [Int!]
  violence_not_in: [Int!]
  violence_lt: Int
  violence_lte: Int
  violence_gt: Int
  violence_gte: Int
  AND: [CrimeWhereInput!]
  OR: [CrimeWhereInput!]
  NOT: [CrimeWhereInput!]
}

input CrimeWhereUniqueInput {
  id: ID
  gu: String
}

scalar DateTime

type Favorite {
  id: ID!
  aliasInput: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  postedBy: User!
  postedAt: Address!
}

type FavoriteConnection {
  pageInfo: PageInfo!
  edges: [FavoriteEdge]!
  aggregate: AggregateFavorite!
}

input FavoriteCreateInput {
  id: ID
  aliasInput: String!
  postedBy: UserCreateOneWithoutFavoriteInput!
  postedAt: AddressCreateOneWithoutFavoriteInput!
}

input FavoriteCreateManyWithoutPostedAtInput {
  create: [FavoriteCreateWithoutPostedAtInput!]
  connect: [FavoriteWhereUniqueInput!]
}

input FavoriteCreateManyWithoutPostedByInput {
  create: [FavoriteCreateWithoutPostedByInput!]
  connect: [FavoriteWhereUniqueInput!]
}

input FavoriteCreateWithoutPostedAtInput {
  id: ID
  aliasInput: String!
  postedBy: UserCreateOneWithoutFavoriteInput!
}

input FavoriteCreateWithoutPostedByInput {
  id: ID
  aliasInput: String!
  postedAt: AddressCreateOneWithoutFavoriteInput!
}

type FavoriteEdge {
  node: Favorite!
  cursor: String!
}

enum FavoriteOrderByInput {
  id_ASC
  id_DESC
  aliasInput_ASC
  aliasInput_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type FavoritePreviousValues {
  id: ID!
  aliasInput: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input FavoriteScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  aliasInput: String
  aliasInput_not: String
  aliasInput_in: [String!]
  aliasInput_not_in: [String!]
  aliasInput_lt: String
  aliasInput_lte: String
  aliasInput_gt: String
  aliasInput_gte: String
  aliasInput_contains: String
  aliasInput_not_contains: String
  aliasInput_starts_with: String
  aliasInput_not_starts_with: String
  aliasInput_ends_with: String
  aliasInput_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [FavoriteScalarWhereInput!]
  OR: [FavoriteScalarWhereInput!]
  NOT: [FavoriteScalarWhereInput!]
}

type FavoriteSubscriptionPayload {
  mutation: MutationType!
  node: Favorite
  updatedFields: [String!]
  previousValues: FavoritePreviousValues
}

input FavoriteSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FavoriteWhereInput
  AND: [FavoriteSubscriptionWhereInput!]
  OR: [FavoriteSubscriptionWhereInput!]
  NOT: [FavoriteSubscriptionWhereInput!]
}

input FavoriteUpdateInput {
  aliasInput: String
  postedBy: UserUpdateOneRequiredWithoutFavoriteInput
  postedAt: AddressUpdateOneRequiredWithoutFavoriteInput
}

input FavoriteUpdateManyDataInput {
  aliasInput: String
}

input FavoriteUpdateManyMutationInput {
  aliasInput: String
}

input FavoriteUpdateManyWithoutPostedAtInput {
  create: [FavoriteCreateWithoutPostedAtInput!]
  delete: [FavoriteWhereUniqueInput!]
  connect: [FavoriteWhereUniqueInput!]
  set: [FavoriteWhereUniqueInput!]
  disconnect: [FavoriteWhereUniqueInput!]
  update: [FavoriteUpdateWithWhereUniqueWithoutPostedAtInput!]
  upsert: [FavoriteUpsertWithWhereUniqueWithoutPostedAtInput!]
  deleteMany: [FavoriteScalarWhereInput!]
  updateMany: [FavoriteUpdateManyWithWhereNestedInput!]
}

input FavoriteUpdateManyWithoutPostedByInput {
  create: [FavoriteCreateWithoutPostedByInput!]
  delete: [FavoriteWhereUniqueInput!]
  connect: [FavoriteWhereUniqueInput!]
  set: [FavoriteWhereUniqueInput!]
  disconnect: [FavoriteWhereUniqueInput!]
  update: [FavoriteUpdateWithWhereUniqueWithoutPostedByInput!]
  upsert: [FavoriteUpsertWithWhereUniqueWithoutPostedByInput!]
  deleteMany: [FavoriteScalarWhereInput!]
  updateMany: [FavoriteUpdateManyWithWhereNestedInput!]
}

input FavoriteUpdateManyWithWhereNestedInput {
  where: FavoriteScalarWhereInput!
  data: FavoriteUpdateManyDataInput!
}

input FavoriteUpdateWithoutPostedAtDataInput {
  aliasInput: String
  postedBy: UserUpdateOneRequiredWithoutFavoriteInput
}

input FavoriteUpdateWithoutPostedByDataInput {
  aliasInput: String
  postedAt: AddressUpdateOneRequiredWithoutFavoriteInput
}

input FavoriteUpdateWithWhereUniqueWithoutPostedAtInput {
  where: FavoriteWhereUniqueInput!
  data: FavoriteUpdateWithoutPostedAtDataInput!
}

input FavoriteUpdateWithWhereUniqueWithoutPostedByInput {
  where: FavoriteWhereUniqueInput!
  data: FavoriteUpdateWithoutPostedByDataInput!
}

input FavoriteUpsertWithWhereUniqueWithoutPostedAtInput {
  where: FavoriteWhereUniqueInput!
  update: FavoriteUpdateWithoutPostedAtDataInput!
  create: FavoriteCreateWithoutPostedAtInput!
}

input FavoriteUpsertWithWhereUniqueWithoutPostedByInput {
  where: FavoriteWhereUniqueInput!
  update: FavoriteUpdateWithoutPostedByDataInput!
  create: FavoriteCreateWithoutPostedByInput!
}

input FavoriteWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  aliasInput: String
  aliasInput_not: String
  aliasInput_in: [String!]
  aliasInput_not_in: [String!]
  aliasInput_lt: String
  aliasInput_lte: String
  aliasInput_gt: String
  aliasInput_gte: String
  aliasInput_contains: String
  aliasInput_not_contains: String
  aliasInput_starts_with: String
  aliasInput_not_starts_with: String
  aliasInput_ends_with: String
  aliasInput_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  postedBy: UserWhereInput
  postedAt: AddressWhereInput
  AND: [FavoriteWhereInput!]
  OR: [FavoriteWhereInput!]
  NOT: [FavoriteWhereInput!]
}

input FavoriteWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createAddress(data: AddressCreateInput!): Address!
  updateAddress(data: AddressUpdateInput!, where: AddressWhereUniqueInput!): Address
  updateManyAddresses(data: AddressUpdateManyMutationInput!, where: AddressWhereInput): BatchPayload!
  upsertAddress(where: AddressWhereUniqueInput!, create: AddressCreateInput!, update: AddressUpdateInput!): Address!
  deleteAddress(where: AddressWhereUniqueInput!): Address
  deleteManyAddresses(where: AddressWhereInput): BatchPayload!
  createCrime(data: CrimeCreateInput!): Crime!
  updateCrime(data: CrimeUpdateInput!, where: CrimeWhereUniqueInput!): Crime
  updateManyCrimes(data: CrimeUpdateManyMutationInput!, where: CrimeWhereInput): BatchPayload!
  upsertCrime(where: CrimeWhereUniqueInput!, create: CrimeCreateInput!, update: CrimeUpdateInput!): Crime!
  deleteCrime(where: CrimeWhereUniqueInput!): Crime
  deleteManyCrimes(where: CrimeWhereInput): BatchPayload!
  createFavorite(data: FavoriteCreateInput!): Favorite!
  updateFavorite(data: FavoriteUpdateInput!, where: FavoriteWhereUniqueInput!): Favorite
  updateManyFavorites(data: FavoriteUpdateManyMutationInput!, where: FavoriteWhereInput): BatchPayload!
  upsertFavorite(where: FavoriteWhereUniqueInput!, create: FavoriteCreateInput!, update: FavoriteUpdateInput!): Favorite!
  deleteFavorite(where: FavoriteWhereUniqueInput!): Favorite
  deleteManyFavorites(where: FavoriteWhereInput): BatchPayload!
  createReview(data: ReviewCreateInput!): Review!
  updateReview(data: ReviewUpdateInput!, where: ReviewWhereUniqueInput!): Review
  updateManyReviews(data: ReviewUpdateManyMutationInput!, where: ReviewWhereInput): BatchPayload!
  upsertReview(where: ReviewWhereUniqueInput!, create: ReviewCreateInput!, update: ReviewUpdateInput!): Review!
  deleteReview(where: ReviewWhereUniqueInput!): Review
  deleteManyReviews(where: ReviewWhereInput): BatchPayload!
  createStation(data: StationCreateInput!): Station!
  updateStation(data: StationUpdateInput!, where: StationWhereUniqueInput!): Station
  updateManyStations(data: StationUpdateManyMutationInput!, where: StationWhereInput): BatchPayload!
  upsertStation(where: StationWhereUniqueInput!, create: StationCreateInput!, update: StationUpdateInput!): Station!
  deleteStation(where: StationWhereUniqueInput!): Station
  deleteManyStations(where: StationWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  address(where: AddressWhereUniqueInput!): Address
  addresses(where: AddressWhereInput, orderBy: AddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Address]!
  addressesConnection(where: AddressWhereInput, orderBy: AddressOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AddressConnection!
  crime(where: CrimeWhereUniqueInput!): Crime
  crimes(where: CrimeWhereInput, orderBy: CrimeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Crime]!
  crimesConnection(where: CrimeWhereInput, orderBy: CrimeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CrimeConnection!
  favorite(where: FavoriteWhereUniqueInput!): Favorite
  favorites(where: FavoriteWhereInput, orderBy: FavoriteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Favorite]!
  favoritesConnection(where: FavoriteWhereInput, orderBy: FavoriteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FavoriteConnection!
  review(where: ReviewWhereUniqueInput!): Review
  reviews(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Review]!
  reviewsConnection(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ReviewConnection!
  station(where: StationWhereUniqueInput!): Station
  stations(where: StationWhereInput, orderBy: StationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Station]!
  stationsConnection(where: StationWhereInput, orderBy: StationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StationConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Review {
  id: ID!
  text: String!
  rating: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  postedBy: User!
  postedAt: Address!
}

type ReviewConnection {
  pageInfo: PageInfo!
  edges: [ReviewEdge]!
  aggregate: AggregateReview!
}

input ReviewCreateInput {
  id: ID
  text: String!
  rating: Int!
  postedBy: UserCreateOneWithoutReviewInput!
  postedAt: AddressCreateOneWithoutReviewInput!
}

input ReviewCreateManyWithoutPostedAtInput {
  create: [ReviewCreateWithoutPostedAtInput!]
  connect: [ReviewWhereUniqueInput!]
}

input ReviewCreateManyWithoutPostedByInput {
  create: [ReviewCreateWithoutPostedByInput!]
  connect: [ReviewWhereUniqueInput!]
}

input ReviewCreateWithoutPostedAtInput {
  id: ID
  text: String!
  rating: Int!
  postedBy: UserCreateOneWithoutReviewInput!
}

input ReviewCreateWithoutPostedByInput {
  id: ID
  text: String!
  rating: Int!
  postedAt: AddressCreateOneWithoutReviewInput!
}

type ReviewEdge {
  node: Review!
  cursor: String!
}

enum ReviewOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  rating_ASC
  rating_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ReviewPreviousValues {
  id: ID!
  text: String!
  rating: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ReviewScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  rating: Int
  rating_not: Int
  rating_in: [Int!]
  rating_not_in: [Int!]
  rating_lt: Int
  rating_lte: Int
  rating_gt: Int
  rating_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ReviewScalarWhereInput!]
  OR: [ReviewScalarWhereInput!]
  NOT: [ReviewScalarWhereInput!]
}

type ReviewSubscriptionPayload {
  mutation: MutationType!
  node: Review
  updatedFields: [String!]
  previousValues: ReviewPreviousValues
}

input ReviewSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ReviewWhereInput
  AND: [ReviewSubscriptionWhereInput!]
  OR: [ReviewSubscriptionWhereInput!]
  NOT: [ReviewSubscriptionWhereInput!]
}

input ReviewUpdateInput {
  text: String
  rating: Int
  postedBy: UserUpdateOneRequiredWithoutReviewInput
  postedAt: AddressUpdateOneRequiredWithoutReviewInput
}

input ReviewUpdateManyDataInput {
  text: String
  rating: Int
}

input ReviewUpdateManyMutationInput {
  text: String
  rating: Int
}

input ReviewUpdateManyWithoutPostedAtInput {
  create: [ReviewCreateWithoutPostedAtInput!]
  delete: [ReviewWhereUniqueInput!]
  connect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  disconnect: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutPostedAtInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutPostedAtInput!]
  deleteMany: [ReviewScalarWhereInput!]
  updateMany: [ReviewUpdateManyWithWhereNestedInput!]
}

input ReviewUpdateManyWithoutPostedByInput {
  create: [ReviewCreateWithoutPostedByInput!]
  delete: [ReviewWhereUniqueInput!]
  connect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  disconnect: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutPostedByInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutPostedByInput!]
  deleteMany: [ReviewScalarWhereInput!]
  updateMany: [ReviewUpdateManyWithWhereNestedInput!]
}

input ReviewUpdateManyWithWhereNestedInput {
  where: ReviewScalarWhereInput!
  data: ReviewUpdateManyDataInput!
}

input ReviewUpdateWithoutPostedAtDataInput {
  text: String
  rating: Int
  postedBy: UserUpdateOneRequiredWithoutReviewInput
}

input ReviewUpdateWithoutPostedByDataInput {
  text: String
  rating: Int
  postedAt: AddressUpdateOneRequiredWithoutReviewInput
}

input ReviewUpdateWithWhereUniqueWithoutPostedAtInput {
  where: ReviewWhereUniqueInput!
  data: ReviewUpdateWithoutPostedAtDataInput!
}

input ReviewUpdateWithWhereUniqueWithoutPostedByInput {
  where: ReviewWhereUniqueInput!
  data: ReviewUpdateWithoutPostedByDataInput!
}

input ReviewUpsertWithWhereUniqueWithoutPostedAtInput {
  where: ReviewWhereUniqueInput!
  update: ReviewUpdateWithoutPostedAtDataInput!
  create: ReviewCreateWithoutPostedAtInput!
}

input ReviewUpsertWithWhereUniqueWithoutPostedByInput {
  where: ReviewWhereUniqueInput!
  update: ReviewUpdateWithoutPostedByDataInput!
  create: ReviewCreateWithoutPostedByInput!
}

input ReviewWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  rating: Int
  rating_not: Int
  rating_in: [Int!]
  rating_not_in: [Int!]
  rating_lt: Int
  rating_lte: Int
  rating_gt: Int
  rating_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  postedBy: UserWhereInput
  postedAt: AddressWhereInput
  AND: [ReviewWhereInput!]
  OR: [ReviewWhereInput!]
  NOT: [ReviewWhereInput!]
}

input ReviewWhereUniqueInput {
  id: ID
}

type Station {
  id: ID!
  stationName: String!
  X: Float!
  Y: Float!
  stationAddress: String!
}

type StationConnection {
  pageInfo: PageInfo!
  edges: [StationEdge]!
  aggregate: AggregateStation!
}

input StationCreateInput {
  id: ID
  stationName: String!
  X: Float!
  Y: Float!
  stationAddress: String!
}

type StationEdge {
  node: Station!
  cursor: String!
}

enum StationOrderByInput {
  id_ASC
  id_DESC
  stationName_ASC
  stationName_DESC
  X_ASC
  X_DESC
  Y_ASC
  Y_DESC
  stationAddress_ASC
  stationAddress_DESC
}

type StationPreviousValues {
  id: ID!
  stationName: String!
  X: Float!
  Y: Float!
  stationAddress: String!
}

type StationSubscriptionPayload {
  mutation: MutationType!
  node: Station
  updatedFields: [String!]
  previousValues: StationPreviousValues
}

input StationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: StationWhereInput
  AND: [StationSubscriptionWhereInput!]
  OR: [StationSubscriptionWhereInput!]
  NOT: [StationSubscriptionWhereInput!]
}

input StationUpdateInput {
  stationName: String
  X: Float
  Y: Float
  stationAddress: String
}

input StationUpdateManyMutationInput {
  stationName: String
  X: Float
  Y: Float
  stationAddress: String
}

input StationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  stationName: String
  stationName_not: String
  stationName_in: [String!]
  stationName_not_in: [String!]
  stationName_lt: String
  stationName_lte: String
  stationName_gt: String
  stationName_gte: String
  stationName_contains: String
  stationName_not_contains: String
  stationName_starts_with: String
  stationName_not_starts_with: String
  stationName_ends_with: String
  stationName_not_ends_with: String
  X: Float
  X_not: Float
  X_in: [Float!]
  X_not_in: [Float!]
  X_lt: Float
  X_lte: Float
  X_gt: Float
  X_gte: Float
  Y: Float
  Y_not: Float
  Y_in: [Float!]
  Y_not_in: [Float!]
  Y_lt: Float
  Y_lte: Float
  Y_gt: Float
  Y_gte: Float
  stationAddress: String
  stationAddress_not: String
  stationAddress_in: [String!]
  stationAddress_not_in: [String!]
  stationAddress_lt: String
  stationAddress_lte: String
  stationAddress_gt: String
  stationAddress_gte: String
  stationAddress_contains: String
  stationAddress_not_contains: String
  stationAddress_starts_with: String
  stationAddress_not_starts_with: String
  stationAddress_ends_with: String
  stationAddress_not_ends_with: String
  AND: [StationWhereInput!]
  OR: [StationWhereInput!]
  NOT: [StationWhereInput!]
}

input StationWhereUniqueInput {
  id: ID
}

type Subscription {
  address(where: AddressSubscriptionWhereInput): AddressSubscriptionPayload
  crime(where: CrimeSubscriptionWhereInput): CrimeSubscriptionPayload
  favorite(where: FavoriteSubscriptionWhereInput): FavoriteSubscriptionPayload
  review(where: ReviewSubscriptionWhereInput): ReviewSubscriptionPayload
  station(where: StationSubscriptionWhereInput): StationSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  email: String!
  password: String!
  review(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Review!]
  favorite(where: FavoriteWhereInput, orderBy: FavoriteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Favorite!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  email: String!
  password: String!
  review: ReviewCreateManyWithoutPostedByInput
  favorite: FavoriteCreateManyWithoutPostedByInput
}

input UserCreateOneWithoutFavoriteInput {
  create: UserCreateWithoutFavoriteInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutReviewInput {
  create: UserCreateWithoutReviewInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutFavoriteInput {
  id: ID
  email: String!
  password: String!
  review: ReviewCreateManyWithoutPostedByInput
}

input UserCreateWithoutReviewInput {
  id: ID
  email: String!
  password: String!
  favorite: FavoriteCreateManyWithoutPostedByInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  email: String
  password: String
  review: ReviewUpdateManyWithoutPostedByInput
  favorite: FavoriteUpdateManyWithoutPostedByInput
}

input UserUpdateManyMutationInput {
  email: String
  password: String
}

input UserUpdateOneRequiredWithoutFavoriteInput {
  create: UserCreateWithoutFavoriteInput
  update: UserUpdateWithoutFavoriteDataInput
  upsert: UserUpsertWithoutFavoriteInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutReviewInput {
  create: UserCreateWithoutReviewInput
  update: UserUpdateWithoutReviewDataInput
  upsert: UserUpsertWithoutReviewInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutFavoriteDataInput {
  email: String
  password: String
  review: ReviewUpdateManyWithoutPostedByInput
}

input UserUpdateWithoutReviewDataInput {
  email: String
  password: String
  favorite: FavoriteUpdateManyWithoutPostedByInput
}

input UserUpsertWithoutFavoriteInput {
  update: UserUpdateWithoutFavoriteDataInput!
  create: UserCreateWithoutFavoriteInput!
}

input UserUpsertWithoutReviewInput {
  update: UserUpdateWithoutReviewDataInput!
  create: UserCreateWithoutReviewInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  review_every: ReviewWhereInput
  review_some: ReviewWhereInput
  review_none: ReviewWhereInput
  favorite_every: FavoriteWhereInput
  favorite_some: FavoriteWhereInput
  favorite_none: FavoriteWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    